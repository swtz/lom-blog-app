Curso de React JS 19 e Next.js 15 (atualizado para 2025)

Seção 3: Next.js 15, React 19 e Tailwind CSS v4: Introdução ao Desenvolvimento Moderno

Aula: 184. Entenda as Server Actions e proteja-se de falhas de segurança

Ao usar as 'server-actions', o desenvolvedor sempre vai ter o objetivo de ALTERAR
algo no servidor. A 'server-action' nunca é usada com a finalidade 'READ'.

Absolutamente toda 'server-action' chega no servidor como uma requisição do tipo 'POST'.

Entretanto, no CABEÇALHO dessa requisição, encontra-se a chave 'Next-Action' e o valor
'<next-action-id>'.

Por que isso é perigoso?

Por que, caso algum usuário tenha acesso ao 'id' da 'server-action', ele pode FAZER
REQUISIÇÕES para o servidor usando essa mesma 'server-action' SEM TER DE USAR O PRÓPRIO NEXT
para isso.

Como assim? Ora, caso um usuário use alguma ferramenta que manda requisições 'http', tais como
Postman, Insomnia ou curl, basta ele mandar uma requisição 'POST' usando em seu cabeçalho
essas informações que o Next aceitará suas solicitações, ou seja, não foi necessário passar pela
aplicação em sí para usar um método que ALTERA informações na base de dados.

O coach-Luiz fez um exemplo usando a própria 'Fetch API' do JavaScript mandando um requisição
do tipo 'POST' contendo a chave/valor da Next Action no cabeçalho da requisição e, no corpo da requisição,
as informações que essa 'server-action' usa. Assim, o usuário pode facilmente obter o valor de retorno
dessa 'server-action' sem ter de passar pela aplicação (usando um simples script nesse caso).

Por isso, é preciso prestar muita atenção nas informações que a 'server-action' possui/retorna e o
que ela faz de fato.

Visão geral:

Computador do cliente <-----> Internet <------> Server Action que executa no servidor a requisição.

Por isso, na 'server-action' é OBRIGAÇÃO do desenvolvedor conferir os dados que foram recebidos pela
'server-action', pois, se parar para pensar, não haverá, por exemplo, o TypeScript garantido o tipo
e o formato dos dados. Por isso, é preciso checar o valor e o tipo dos dados (por exemplo) recebidos
na server-action, por conta do comportamento que mostra o esboço acima.

é preciso pensar em como os dados chegam na 'server-action' e como um dado "mal tratado" pode comprometer
o funcionamento da aplicação (até mesmo o banco de dados se possuir).

O ponto é: ao desenvolver as 'server-actions' NÃO SE DEVE CONFIAR NAS INFERÊNCIAS E TIPAGENS DO TYPESCRIPT.
Assim, o desenvolvedor PRECISA checar condicionais que normalmente o TypeScript faria automaticamente num
ambiente de desenvolvimento.

Assim como um desenvolvedor 'backend' checa tudo e mais um pouco os dados que chegam das requisições do
'frontend', como num 'endpoint' de API, ao desenvolver as 'server-actions', as checagens precisam ser iguais,
pois, para o Next, as 'server-actions' funcionam como 'endpoints'.

Para saber mais:
[google]: next.js security blog
