Curso de React JS 19 e Next.js 15 (atualizado para 2025)

Seção 3: Next.js 15, React 19 e Tailwind CSS v4: Introdução ao Desenvolvimento Moderno

Aula: 109. Padrão de projeto Repository para Posts - Parte 2

Dica para executar uma função anônima rapidamente (útil para resolver valores):

(async () => {
  const jsonContent = await postRepository.findAll();
  console.log(jsonContent);
})();

Isso é uma IIFE (Immediately Invoked Function Expression).

Mesma coisa -> const posts = parsedJson.posts | const { posts } = parsedJson;

Por fim, esse o Pattern Repository é a combinação de uma (ou mais) interfaces, que
é a abstração dos métodos essenciais de um banco de dados (por exemplo), mais
a implementação por meio de uma classe. É interessante essa combinação, pois
uma interface cria um 'contrato' com a classe que a implementa não permitindo
sua instanciação sem que seus métodos sejam implementados respeitando seu tipo.

Estrutura da interface:

export interface PostRepository {
  findAll(): Promise<PostModel[]>;
  findById(id: string): Promise<PostModel>;
}

Estrutura da classe:

export class JsonPostRepository implements PostRepository {
  private async readFromDisk(): Promise<PostModel[]> {
    const jsonContent = await readFile(JSON_POSTS_FILE_PATH, 'utf-8');
    const parsedJson = JSON.parse(jsonContent);
    const { posts } = parsedJson;
    return posts;
  }

  async findAll(): Promise<PostModel[]> {
    const posts = await this.readFromDisk();
    return posts;
  }

  async findById(id: string): Promise<PostModel> {
    const posts = await this.findAll();
    const post = posts.find(post => post.id === id);

    if (!post) throw new Error('Post não encontrado');

    return post;
  }
}

Exemplo de uso:

(async () => {
  // const posts = await postRepository.findAll();
  // posts.forEach(post => {
  //   console.log(post.author);
  // });

  const post = await postRepository.findById(
    'bc9a540f-66a9-4ab0-8d50-6216ab1cac53',
  );
  console.log(post);
})();

Obs.:
O método 'findById' está lançando um 'Error' para que, quando algum componente
for usá-lo possa 'capturar' esse 'Error' com o uso da estrutura 'try/catch'.

Essa é uma opção alternativa à alteração do tipo de retorno do método
(na interface e na implementação) para que ele retorne, ou 'PostModel' ou 'undefined'.

Exportação:

export const postRepository: PostRepository = new JsonPostRepository();

Essa variável depende apenas da interface PostRepository, ou seja,
se existir algum método a mais na classe 'JsonPostRepository', essa variável
não terá acesso a esse método.

Assim, fica claro que 'postRepository' usa a abstração e não a implementação.
Por isso o código fica desacoplado da tecnologia de persistência de dados.
