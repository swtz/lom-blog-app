Curso de React JS 19 e Next.js 15 (atualizado para 2025)

Seção 3: Next.js 15, React 19 e Tailwind CSS v4: Introdução ao Desenvolvimento Moderno

Aula: 105. Server Components vs Client Components com "use client"

Por padrão, todo componente React criado num projeto Next, é um 'server-component',
ou seja, é o servidor intermediário do Next que renderiza esse componente.

Por exemplo, é possível criar componente assíncronos:

export default async function MyComponent() {
  return <h1>Look my async page!</h1>;
}

Assim, é possível instruir código assíncrono dentro dele.

A segurança da informação é um parâmetro importante na escolha do tipo de um componente.
pois os componente 'client-side' vazam informações para o browser. Assim, caso o componente
use informações sensíveis, a melhor escolha é um componente 'server-side'.

Assim, como os 'server components' rodam no lado do servidor, eles não possuem acesso a
métodos do browser como, por exemplo, 'alert', 'confirm', 'onClick' e etc.

Como uso esse métodos?

No arquivo 'page.tsx', basta informar no topo do arquivo a instrução: 'use client';
Assim, o componente se comporta como um componente React comum.
Entretanto, o componente que possui essa diretiva perde todos os benefícios de um componente
'server-side'.

Qual a recomendação do Next?

O programador deve mover APENAS O TRECHO DE CÓDIGO que precisa se comunicar com a API do browser
para um componente isolado, a fim de que esse componente use a diretiva 'use client'.
Assim, não é necessário que um componente inteiro se torne 'client-side', pois ele perderia
todo o potencial de renderização 'server-side' que o Next oferece.

Então, o Next permite combinar o melhor dos dois mundos.

A ideia principal é colocar os componentes que tem interatividade com o browser em um nível
mais fundo da hierarquia geral da aplicação. Assim, ele podem ser transferidos para outro lugar,
convertidos para 'client-side' e, por fim, serem usados pelos componentes que usufruem o recurso
da renderização do servidor Next (Server Components):

page.tsx (server) -> menu.tsx (server) -> link.tsx (client)

Lembrando que hook como 'useEffect' são usados com frequência com componentes que usufruem da
API do browser, ou seja, que são 'client-side'.

Assim, fica evidente que a estrutura da aplicação merece uma atenção maior por conta dos recursos
que o Next oferece com os 'Server Components' (evitar transformar um componente inteiro
para 'client-side').
