Curso de React JS 19 e Next.js 15 (atualizado para 2025)

Seção 3: Next.js 15, React 19 e Tailwind CSS v4: Introdução ao Desenvolvimento Moderno

Aula: 152. Introdução ao cache do Next.js

Nessa aula, foi mostrado o comportamento padrão do Next quando o desenvolvedor cria
as rotas da sua aplicação. Ficou evidente a diferença de uma rota estática e uma rota
dinâmica. Como o desenvolvedor pode ter mais controle sobre isso? É ao fazer a 'build'
do projeto. Após esse processo ser concluído, no terminal, é possível observar o que,
de fato, o Next fez com as rotas — automaticamente. Exemplo:

Route (app)                                 Size  First Load JS
┌ ○ /                                      185 B         110 kB
├ ○ /_not-found                            142 B         101 kB
├ ○ /exemplo                               142 B         101 kB
├ ƒ /exemplo/[id]                          142 B         101 kB
└ ƒ /post/[slug]                           184 B         110 kB
+ First Load JS shared by all             101 kB
  ├ chunks/4bd1b696-daa26928ff622cec.js  53.2 kB
  ├ chunks/684-8c4ea80377268962.js       45.9 kB
  └ other shared chunks (total)          1.89 kB


○  (Static)   prerendered as static content
ƒ  (Dynamic)  server-rendered on demand

Dessa forma, o desenvolvedor pode ter consciência de como suas rotas
irão se comportar durante o clico de vida da aplicação.

O coach-Luiz reforçou a importância do processo de 'build' no papel de apresentar
ao desenvolvedor o real comportamento que sua aplicação terá, pois no modo de
desenvolvimento, tudo aparenta ser dinâmico sendo que após a 'build' a aplicação
se comportará de modo realístico ou no modo PRODUÇÃO.

O coach-Luiz recomendou fortemente ler a documentação do Next sobre 'caching' da aplicação.
Essa parte da documentação apresenta como o Next.js funciona por debaixo dos panos.
